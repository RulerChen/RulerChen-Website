"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[87],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>b});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=r.createContext({}),l=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},s=function(n){var e=l(n.components);return r.createElement(u.Provider,{value:e},n.children)},c="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,u=n.parentName,s=p(n,["components","mdxType","originalType","parentName"]),c=l(t),f=a,b=c["".concat(u,".").concat(f)]||c[f]||d[f]||i;return t?r.createElement(b,o(o({ref:e},s),{},{components:t})):r.createElement(b,o({ref:e},s))}));function b(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,o=new Array(i);o[0]=f;var p={};for(var u in e)hasOwnProperty.call(e,u)&&(p[u]=e[u]);p.originalType=n,p[c]="string"==typeof n?n:a,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9075:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={title:"\u4f75\u67e5\u96c6(Disjoint Set)",description:123,keywords:["Disjoint set","Union find","\u4f75\u67e5\u96c6","\u4e26\u67e5\u96c6"]},o="\u4f75\u67e5\u96c6(Disjoint Set)",p={unversionedId:"Data Structure/test",id:"Data Structure/test",title:"\u4f75\u67e5\u96c6(Disjoint Set)",description:"123",source:"@site/docs/Data Structure/test.md",sourceDirName:"Data Structure",slug:"/Data Structure/test",permalink:"/RulerChen-Website/docs/Data Structure/test",draft:!1,tags:[],version:"current",frontMatter:{title:"\u4f75\u67e5\u96c6(Disjoint Set)",description:"123",keywords:["Disjoint set","Union find","\u4f75\u67e5\u96c6","\u4e26\u67e5\u96c6"]},sidebar:"tutorialSidebar",previous:{title:"Data Structure",permalink:"/RulerChen-Website/docs/category/data-structure"},next:{title:"Algorithm",permalink:"/RulerChen-Website/docs/category/algorithm"}},u={},l=[{value:"\u4e00\u3001\u7c21\u4ecb",id:"\u4e00\u7c21\u4ecb",level:2},{value:"\u4e8c\u3001\u7df4\u7fd2",id:"\u4e8c\u7df4\u7fd2",level:2},{value:"<strong><u>684. Redundant Connection(Medium)</u></strong>",id:"u684-redundant-connectionmediumu",level:3},{value:"\u984c\u76ee",id:"\u984c\u76ee",level:4},{value:"\u7bc4\u4f8b\u8f38\u5165",id:"\u7bc4\u4f8b\u8f38\u5165",level:4},{value:"\u60f3\u6cd5",id:"\u60f3\u6cd5",level:4},{value:"\u7a0b\u5f0f\u78bc",id:"\u7a0b\u5f0f\u78bc",level:4}],s={toc:l},c="wrapper";function d(n){let{components:e,...t}=n;return(0,a.kt)(c,(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4f75\u67e5\u96c6disjoint-set"},"\u4f75\u67e5\u96c6(Disjoint Set)"),(0,a.kt)("h2",{id:"\u4e00\u7c21\u4ecb"},"\u4e00\u3001\u7c21\u4ecb"),(0,a.kt)("p",null,"Disjoint Set \u672c\u8eab\u5c31\u662f\u4e00\u7a2e Set\uff0c\u8868\u793a\u4e86\u6bcf\u7d44 Set \u90fd\u662f\u4e92\u65a5\u7684\uff0c\u6bd4\u5982 A={1, 2}\u3001B={3, 4}\uff0c\n\u5247 A \u548c B \u5373\u70ba Disjoint Set\uff0c\u5728\u6700\u5dee\u7684\u60c5\u6cc1\u4e0b\u6703\u9000\u5316\u6210\u934a\u8868\uff0c\u56e0\u6b64\u6211\u5011\u8981\u63a1\u53d6\u4ee5\u4e0b\u5e7e\u7a2e\u65b9\u6cd5\u4f86\u907f\u514d\u3002"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Path Compression : \u5c07\u8d70\u904e\u7684\u7bc0\u9ede\u90fd\u6307\u5411\u7236\u7bc0\u9ede\uff0c\u6211\u5011\u53ef\u4ee5\u7528\u905e\u8ff4\u4f86\u5b8c\u6210"),(0,a.kt)("li",{parentName:"ol"},"Union by rank : \u5c07 rank \u6bd4\u8f03\u5c0f\u7684 set \u52a0\u5165 rank \u6bd4\u8f03\u5927\u7684 set \u88e1\u9762")),(0,a.kt)("p",null,"\u900f\u904e\u4ee5\u4e0a\u9019\u5169\u7a2e\u65b9\u6cd5\u4f86\u964d\u4f4e Disjoint Set \u7684 find \u548c union \u8907\u96dc\u5ea6\u5230 O(1)\uff0c\u800c\u5efa\u69cb\u7684\u8907\u96dc\u5ea6\u5247\u70ba O(n)\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp="},"class DisjointSet {\n   public:\n    // \u8f38\u5165\u5927\u5c0f\n    DisjointSet(int n) {\n        rank.resize(n, 0);\n        parent.resize(n, 0);\n\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n    // \u8f38\u5165\u8981\u627e\u7684\u6578\u5b57\uff0c return parent \u4e26\u505a path compression\n    int find(int n) {\n        if (n == parent[n]) {\n            return n;\n        }\n        return parent[n] = find(parent[n]);\n    }\n    // union by rank\uff0c\u7d50\u5408\u5169\u500b set\n    // \u5982\u679c\u6210\u529f return true\uff0c\u5982\u679c\u672c\u4f86\u5c31\u5728\u4e00\u500b parent \u4e0b\u5c31 return false\n    bool unionSet(int a, int b) {\n        int parent_a = find(a);\n        int parent_b = find(b);\n        if (parent_a == parent_b) return false;\n\n        if (rank[parent_a] > rank[parent_b]) {\n            parent[parent_b] = parent_a;\n        } else if (rank[parent_a] < rank[parent_b]) {\n            parent[parent_a] = parent_b;\n        } else {\n            parent[parent_b] = parent_a;\n            rank[parent_a]++;\n        }\n        return true;\n    }\n\n   private:\n    vector<int> parent;\n    vector<int> rank;\n};\n")),(0,a.kt)("h2",{id:"\u4e8c\u7df4\u7fd2"},"\u4e8c\u3001\u7df4\u7fd2"),(0,a.kt)("h3",{id:"u684-redundant-connectionmediumu"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.com/problems/binary-search/"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("u",null,"684. Redundant Connection(Medium)")))),(0,a.kt)("h4",{id:"\u984c\u76ee"},"\u984c\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u7d66\u5b9a\u4e00\u500b\u7121\u5411\u5716\uff0c\u8f38\u51fa\u4e00\u500b\u53ef\u4ee5\u79fb\u9664\u7684\u908a\u4f7f\u9019\u500b\u7121\u5411\u5716\u8b8a\u6210\u6a39\n")),(0,a.kt)("h4",{id:"\u7bc4\u4f8b\u8f38\u5165"},"\u7bc4\u4f8b\u8f38\u5165"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n")),(0,a.kt)("h4",{id:"\u60f3\u6cd5"},"\u60f3\u6cd5"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u4f7f\u7528 disjoint set \u4f86\u627e\u51fa\u591a\u9918\u7684\u908a")),(0,a.kt)("h4",{id:"\u7a0b\u5f0f\u78bc"},"\u7a0b\u5f0f\u78bc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp="},"class DisjointSet {\n   public:\n    DisjointSet(int n) {\n        rank.resize(n, 0);\n        parent.resize(n, 0);\n\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n    int find(int n) {\n        if (n == parent[n]) {\n            return n;\n        }\n        return parent[n] = find(parent[n]);\n    }\n    bool unionSet(int a, int b) {\n        int parent_a = find(a);\n        int parent_b = find(b);\n        if (parent_a == parent_b) return false;\n\n        if (rank[parent_a] > rank[parent_b]) {\n            parent[parent_b] = parent_a;\n        } else if (rank[parent_a] < rank[parent_b]) {\n            parent[parent_a] = parent_b;\n        } else {\n            parent[parent_b] = parent_a;\n            rank[parent_a]++;\n        }\n        return true;\n    }\n\n   private:\n    vector<int> parent;\n    vector<int> rank;\n};\n\nclass Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        DisjointSet s(edges.size() + 1);\n        for (int i = 0; i < edges.size(); ++i) {\n            if (!s.unionSet(edges[i][0], edges[i][1])) {\n                return {edges[i][0], edges[i][1]};\n            }\n        }\n        return {};\n    }\n};\n")))}d.isMDXComponent=!0}}]);