"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["5553"],{49616:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>r,default:()=>a,toc:()=>u,metadata:()=>d,assets:()=>o,contentTitle:()=>c});var d=JSON.parse('{"id":"C++/synchronize","title":"[C++] \u540C\u6B65\u539F\u8A9E (Synchronize Primitive)","description":"C++ \u540C\u6B65\u539F\u8A9E","source":"@site/docs/C++/synchronize.mdx","sourceDirName":"C++","slug":"/C++/synchronize","permalink":"/RulerChen-Website/docs/C++/synchronize","draft":false,"unlisted":false,"editUrl":"https://github.com/RulerChen/RulerChen-Website/tree/main/docs/C++/synchronize.mdx","tags":[],"version":"current","lastUpdatedAt":1730249608000,"sidebarPosition":200,"frontMatter":{"title":"[C++] \u540C\u6B65\u539F\u8A9E (Synchronize Primitive)","sidebar_position":200,"description":"C++ \u540C\u6B65\u539F\u8A9E","keywords":["C++","\u540C\u6B65\u539F\u8A9E","Synchronize Primitive"]},"sidebar":"tutorialSidebar","previous":{"title":"[C++] \u79FB\u52D5\u8A9E\u610F (Move Semantics)","permalink":"/RulerChen-Website/docs/C++/move"},"next":{"title":"[C++] STL Container","permalink":"/RulerChen-Website/docs/C++/stlcontainer"}}'),s=t(85893),i=t(50065);let r={title:"[C++] \u540C\u6B65\u539F\u8A9E (Synchronize Primitive)",sidebar_position:"200",description:"C++ \u540C\u6B65\u539F\u8A9E",keywords:["C++","\u540C\u6B65\u539F\u8A9E","Synchronize Primitive"]},c=void 0,o={},u=[{value:"Thread",id:"thread",level:2},{value:"Mutex",id:"mutex",level:2},{value:"std::lock_guard",id:"stdlock_guard",level:3},{value:"std::unique_lock",id:"stdunique_lock",level:3},{value:"std::scoped_lock",id:"stdscoped_lock",level:3},{value:"Condition Variable",id:"condition-variable",level:2},{value:"Shared-Mutex &amp; Shared-Lock",id:"shared-mutex--shared-lock",level:2},{value:"Future",id:"future",level:2},{value:"std::async",id:"stdasync",level:3},{value:"std::promise",id:"stdpromise",level:3},{value:"std::packaged_task",id:"stdpackaged_task",level:3},{value:"std::shared_future",id:"stdshared_future",level:3}];function l(n){let e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\u672C\u6587\u6703\u8B1B\u89E3 C++ \u4E2D\u540C\u6B65\u539F\u8A9E (synchronize primitive) \u7684\u57FA\u672C\u6982\u5FF5\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"thread",children:"Thread"}),"\n",(0,s.jsxs)(e.p,{children:["\u70BA\u4E86\u63D0\u9AD8\u7A0B\u5F0F\u7684\u6548\u80FD\uFF0C\u8A31\u591A\u7A0B\u5F0F\u8A9E\u8A00\u90FD\u652F\u6301\u591A\u57F7\u884C\u7DD2 (multi-thread)\uFF0C\u800C C++ \u4E5F\u63D0\u4F9B\u4E86 ",(0,s.jsx)(e.code,{children:"std::thread"})," \u4F86\u652F\u63F4\u591A\u57F7\u884C\u7DD2\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <thread>\n\nint count = 0;\n\nvoid add_count() { count += 1; }\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"mutex",children:"Mutex"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728\u591A\u57F7\u884C\u7DD2\u7684\u74B0\u5883\u4E0B\uFF0C\u70BA\u4E86\u907F\u514D\u591A\u500B\u57F7\u884C\u7DD2\u540C\u6642\u4FEE\u6539\u5171\u4EAB\u8CC7\u6E90 (shared resource)\uFF0C\u6211\u5011\u53EF\u4EE5\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::mutex"})," \u4F86\u4FDD\u8B77\u5171\u4EAB\u8CC7\u6E90\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    mtx.lock();\n    count += 1;\n    mtx.unlock();\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdlock_guard",children:"std::lock_guard"}),"\n",(0,s.jsxs)(e.p,{children:["\u70BA\u4E86\u907F\u514D\u6C92\u6709 unlock \u7684\u610F\u5916\u60C5\u6CC1\uFF0CC++11 \u4E2D\u63D0\u4F9B\u4E86\u4E00\u500B\u57FA\u65BC RAII \u6A5F\u5236\u7684 ",(0,s.jsx)(e.code,{children:"std::lock_guard"})," \u4F86\u53D6\u4EE3 ",(0,s.jsx)(e.code,{children:"std::mutex"})," \u7684 ",(0,s.jsx)(e.code,{children:"lock"})," \u548C ",(0,s.jsx)(e.code,{children:"unlock"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    std::lock_guard<std::mutex> lock(mtx);\n    count += 1;\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdunique_lock",children:"std::unique_lock"}),"\n",(0,s.jsxs)(e.p,{children:["\u9664\u6B64\u4E4B\u5916\uFF0CC++11 \u9084\u63D0\u4F9B\u4E86\u53E6\u4E00\u500B\u66F4\u9748\u6D3B\u7684\u540C\u6B65\u539F\u8A9E ",(0,s.jsx)(e.code,{children:"std::unique_lock"}),"\uFF0C\u53EF\u4EE5\u5728\u9700\u8981\u6642\u624B\u52D5 lock \u548C unlock\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    std::unique_lock<std::mutex> lock(mtx);\n    count += 1;\n    lock.unlock();\n\n    // Do some other work\n\n    lock.lock();\n    count += 1;\n    lock.unlock();\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdscoped_lock",children:"std::scoped_lock"}),"\n",(0,s.jsxs)(e.p,{children:["\u5230\u4E86 C++17\uFF0CC++ \u63D0\u4F9B\u4E86\u4E00\u7A2E\u66F4\u65B0\u7684\u540C\u6B65\u539F\u8A9E ",(0,s.jsx)(e.code,{children:"std::scoped_lock"}),"\uFF0C\u53EF\u4EE5\u540C\u6642 lock \u591A\u500B mutex\uFF0C\u4E26\u4E14\u53EF\u4EE5\u907F\u514D\u6B7B\u9396 (deadlock) \u7684\u554F\u984C\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    std::scoped_lock lock(mtx);\n    count += 1;\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"condition-variable",children:"Condition Variable"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728\u591A\u57F7\u884C\u7DD2\u7684\u74B0\u5883\u4E0B\uFF0C\u6709\u6642\u5019\u6211\u5011\u9700\u8981\u7B49\u5F85\u67D0\u500B\u689D\u4EF6\u6210\u7ACB\u5F8C\u518D\u7E7C\u7E8C\u57F7\u884C\uFF0C\u9019\u6642\u5019\u6211\u5011\u53EF\u4EE5\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::condition_variable"})," \u4F86\u9054\u6210\u3002\n\u5982\u679C\u8981\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::condition_variable"}),"\uFF0C\u4E00\u5B9A\u8981\u642D\u914D ",(0,s.jsx)(e.code,{children:"std::unique_lock"})," \u4F86\u4F7F\u7528\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <condition_variable>\n#include <iostream>\n#include <mutex>\n#include <queue>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nstd::queue<int> dataQueue;\nbool done = false;\n\n// \u751F\u7522\u8005\uFF1A\u751F\u6210\u6578\u64DA\u4E26\u52A0\u5165\u4F47\u5217\nvoid producer(int n) {\n    for (int i = 0; i < n; ++i) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(100));  // \u6A21\u64EC\u751F\u7522\u6642\u9593\n        std::unique_lock<std::mutex> lock(mtx);\n        dataQueue.push(i);\n        std::cout << "Produced: " << i << std::endl;\n        cv.notify_one();\n    }\n    std::unique_lock<std::mutex> lock(mtx);\n    done = true;\n    cv.notify_all();\n}\n\n// \u6D88\u8CBB\u8005\uFF1A\u6D88\u8017\u4F47\u5217\u4E2D\u7684\u6578\u64DA\nvoid consumer() {\n    while (true) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [] { return !dataQueue.empty() || done; });\n\n        while (!dataQueue.empty()) {\n            int value = dataQueue.front();\n            dataQueue.pop();\n            lock.unlock();\n            std::cout << "Consumed: " << value << std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(150));\n            lock.lock();\n        }\n\n        if (done) break;\n    }\n}\n\nint main() {\n    std::thread prod(producer, 10);\n    std::thread cons(consumer);\n    prod.join();\n    cons.join();\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u4E0A\u6240\u793A\uFF0C\u6211\u5011\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::condition_variable"})," \u4F86\u5BE6\u73FE producer-consumer \u6A21\u5F0F\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"shared-mutex--shared-lock",children:"Shared-Mutex & Shared-Lock"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728\u8F03\u65B0\u7248\u672C\u7684 C++ \u4E2D\uFF0C\u63D0\u4F9B\u4E86\u5169\u500B\u65B0\u7684\u540C\u6B65\u539F\u8A9E ",(0,s.jsx)(e.code,{children:"std::shared_mutex"})," (C++17) \u548C ",(0,s.jsx)(e.code,{children:"std::shared_lock"})," (C++14)\uFF0C\u53EF\u4EE5\u7528\u4F86\u5BE6\u73FE\u8B80\u5BEB\u9396 (read-write lock)\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <shared_mutex>\n#include <thread>\n\nint count = 0;\nstd::shared_mutex m;\n\nvoid read_value() {\n    std::shared_lock lk(m);\n    std::cout << "Reading value " + std::to_string(count) + "\\n" << std::flush;\n}\n\nvoid write_value() {\n    std::unique_lock lk(m);\n    count += 5;\n}\n\nint main() {\n    std::thread t1(read_value);\n    std::thread t2(write_value);\n    std::thread t3(read_value);\n    std::thread t4(read_value);\n    std::thread t5(write_value);\n    std::thread t6(read_value);\n\n    t1.join();\n    t2.join();\n    t3.join();\n    t4.join();\n    t5.join();\n    t6.join();\n\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"std::shared_mutex"})," \u5141\u8A31\u4EE5\u5169\u7A2E\u65B9\u5F0F\u9396\u5B9A\uFF1A\u5171\u4EAB\u9396 (shared lock) \u548C\u7368\u4F54\u9396 (exclusive lock)\u3002\u5171\u4EAB\u9396\u5141\u8A31\u591A\u500B\u57F7\u884C\u7DD2\u540C\u6642\u8B80\u53D6\u8CC7\u6E90\uFF0C\u800C\u7368\u4F54\u9396\u5247\u53EA\u5141\u8A31\u4E00\u500B\u57F7\u884C\u7DD2\u5BEB\u5165\u8CC7\u6E90\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"future",children:"Future"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"std::future"})," \u662F\u5728 C++11 \u4E2D\u5F15\u5165\u7684\u540C\u6B65\u5DE5\u5177\uFF0C\u4E3B\u8981\u7528\u65BC\u7570\u6B65\u64CD\u4F5C (asynchronous operation) \u548C\u591A\u57F7\u884C\u7DD2\u4E4B\u9593\u7684\u901A\u4FE1\uFF0C\u53EF\u4EE5\u8B93\u4E00\u500B\u57F7\u884C\u7DD2\u7B49\u5F85\u53E6\u4E00\u500B\u57F7\u884C\u7DD2\u7684\u7D50\u679C\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"stdasync",children:"std::async"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <chrono>\n#include <future>\n#include <iostream>\n\nint longComputation(int x) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return x * x;\n}\n\nint main() {\n    std::future<int> result = std::async(std::launch::async, longComputation, 5);\n\n    // do something else\n    std::cout << "Performing other work...\\n";\n\n    int value = result.get();\n    std::cout << "Result of computation: " << value << \'\\n\';\n\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u4E0A\u65B9\u6240\u793A\uFF0C\u6211\u5011\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::async"})," \u4F86\u555F\u52D5\u4E00\u500B\u7570\u6B65\u64CD\u4F5C\uFF0C\u4E26\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::future"})," \u4F86\u7B49\u5F85\u7D50\u679C\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"stdpromise",children:"std::promise"}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u679C\u60F3\u8981\u50B3\u905E\u8CC7\u8A0A\u7D66\u5176\u4ED6\u57F7\u884C\u7DD2\uFF0C\u53EF\u4EE5\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::promise"})," \u548C ",(0,s.jsx)(e.code,{children:"std::future"})," \u4F86\u5BE6\u73FE\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <future>\n#include <iostream>\n#include <thread>\n\nvoid setPromiseValue(std::promise<int> &&promise, int value) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    promise.set_value(value * 2);\n}\n\nint main() {\n    std::promise<int> promise;\n    std::future<int> result = promise.get_future();\n\n    std::thread t(setPromiseValue, std::move(promise), 10);\n\n    std::cout << "Waiting for the result...\\n";\n    int value = result.get();\n    std::cout << "Result from promise: " << value << \'\\n\';\n\n    t.join();\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdpackaged_task",children:"std::packaged_task"}),"\n",(0,s.jsxs)(e.p,{children:["\u4E5F\u53EF\u4EE5\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::packaged_task"})," \u4F86\u5C07\u51FD\u6578\u5305\u88DD\u6210\u4E00\u500B ",(0,s.jsx)(e.code,{children:"std::future"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <chrono>\n#include <future>\n#include <iostream>\n#include <thread>\n\nint square(int x) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return x * x;\n}\n\nint main() {\n    std::packaged_task<int(int)> task(square);\n\n    std::future<int> result = task.get_future();\n\n    std::thread t(std::move(task), 5);\n\n    std::cout << "Calculating...\\n";\n    std::cout << "Result of square computation: " << result.get() << \'\\n\';\n\n    t.join();\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdshared_future",children:"std::shared_future"}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u679C\u8981\u5728\u591A\u500B\u57F7\u884C\u7DD2\u4E4B\u9593\u5171\u4EAB\u8CC7\u6599\uFF0C\u53EF\u4EE5\u4F7F\u7528 ",(0,s.jsx)(e.code,{children:"std::shared_future"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"#include <future>\n#include <iostream>\n#include <thread>\n\nint longComputation(int x) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return x * x;\n}\n\nint main() {\n    std::future<int> fut = std::async(std::launch::async, longComputation, 5);\n    std::shared_future<int> shared_result = fut.share();\n\n    auto print_result = [](std::shared_future<int> shared_result) {\n        std::cout << \"Computed result: \" << shared_result.get() << '\\n';\n    };\n\n    std::thread t1(print_result, shared_result);\n    std::thread t2(print_result, shared_result);\n\n    t1.join();\n    t2.join();\n\n    return 0;\n}\n"})})]})}function a(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},50065:function(n,e,t){t.d(e,{Z:()=>c,a:()=>r});var d=t(67294);let s={},i=d.createContext(s);function r(n){let e=d.useContext(i);return d.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),d.createElement(i.Provider,{value:e},n.children)}}}]);