"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["4083"],{55032:function(e,n,o){o.r(n),o.d(n,{frontMatter:()=>t,default:()=>h,toc:()=>c,metadata:()=>s,assets:()=>l,contentTitle:()=>i});var s=JSON.parse('{"id":"Observability/loki-demo","title":"[Loki \u5BE6\u6230] \u6253\u9020\u672C\u5730\u65E5\u8A8C\u8490\u96C6\u7CFB\u7D71","description":"Grafana \u5BE6\u6230\u6559\u5B78\uFF0C\u4F7F\u7528 Express.js \u6253\u9020\u5B8C\u6574\u7684\u76E3\u63A7\u7CFB\u7D71","source":"@site/docs/Observability/loki-demo.mdx","sourceDirName":"Observability","slug":"/Observability/loki-demo","permalink":"/RulerChen-Website/docs/Observability/loki-demo","draft":false,"unlisted":false,"editUrl":"https://github.com/RulerChen/RulerChen-Website/tree/main/docs/Observability/loki-demo.mdx","tags":[],"version":"current","lastUpdatedAt":1741098246000,"sidebarPosition":12,"frontMatter":{"title":"[Loki \u5BE6\u6230] \u6253\u9020\u672C\u5730\u65E5\u8A8C\u8490\u96C6\u7CFB\u7D71","sidebar_position":12,"description":"Grafana \u5BE6\u6230\u6559\u5B78\uFF0C\u4F7F\u7528 Express.js \u6253\u9020\u5B8C\u6574\u7684\u76E3\u63A7\u7CFB\u7D71","keywords":["grafana","express","log","monitoring"]},"sidebar":"tutorialSidebar","previous":{"title":"[Loki] \u60E1\u4F5C\u5287\u4E4B\u795E - Loki \u89E3\u5BC6\u65E5\u8A8C\u8FF7\u5BAE","permalink":"/RulerChen-Website/docs/Observability/loki"},"next":{"title":"[Grafana] \u773E\u795E\u4E4B\u93E1 - Grafana \u5C55\u73FE\u6578\u64DA\u8996\u89BA\u5316\u7684\u5049\u5CB8","permalink":"/RulerChen-Website/docs/Observability/grafana"}}'),r=o(85893),a=o(50065);let t={title:"[Loki \u5BE6\u6230] \u6253\u9020\u672C\u5730\u65E5\u8A8C\u8490\u96C6\u7CFB\u7D71",sidebar_position:12,description:"Grafana \u5BE6\u6230\u6559\u5B78\uFF0C\u4F7F\u7528 Express.js \u6253\u9020\u5B8C\u6574\u7684\u76E3\u63A7\u7CFB\u7D71",keywords:["grafana","express","log","monitoring"]},i=void 0,l={},c=[{value:"API Setup",id:"api-setup",level:2},{value:"Docker Compose",id:"docker-compose",level:2},{value:"Alloy",id:"alloy",level:3},{value:"Loki",id:"loki",level:3},{value:"Grafana",id:"grafana",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"Server",id:"server",level:3},{value:"Request",id:"request",level:3},{value:"Reference",id:"reference",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/RulerChen/grafana-demo/tree/main/express-loki-local",children:"Github Repo Link"})}),"\n",(0,r.jsx)(n.p,{children:"\u9019\u7BC7\u6587\u7AE0\u4E2D\u7684\u76EE\u6A19\u662F\u5728\u672C\u5730\u7AEF\u4F7F\u7528 docker-compose \u6253\u9020\u65E5\u8A8C\u8490\u96C6\u7CFB\u7D71\uFF0C\u6240\u4F7F\u7528\u7684 tech stack \u5982\u4E0B :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Node.js (Express.js) : \u7528\u65BC\u5EFA\u7ACB api server"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL : \u7528\u65BC\u5132\u5B58\u8CC7\u6599"}),"\n",(0,r.jsx)(n.li,{children:"Alloy : \u7528\u65BC\u5C07 log \u8655\u7406\u5F8C\u8F49\u9001\u5230 loki"}),"\n",(0,r.jsx)(n.li,{children:"Loki : \u7528\u65BC\u5132\u5B58 log"}),"\n",(0,r.jsx)(n.li,{children:"Grafana : \u7528\u65BC\u8996\u89BA\u5316\u5100\u8868\u677F"}),"\n",(0,r.jsx)(n.li,{children:"Curl : \u7528\u65BC\u6A21\u64EC request"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Demo \u7684\u6A94\u6848\u7D50\u69CB\u5982\u4E0B :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"\u251C\u2500 config\n\u2502  \u251C\u2500 alloy\n\u2502  \u2502  \u2514\u2500 config.alloy\n\u2502  \u251C\u2500 grafana\n\u2502  \u2502  \u251C\u2500 dashboards\n\u2502  \u2502  \u2514\u2500 provisioning\n\u2502  \u2502     \u2514\u2500 datasources\n\u2502  \u2502        \u2514\u2500 datasources.yaml\n\u2502  \u2514\u2500 loki\n\u2502     \u2514\u2500 loki.config.yaml\n\u251C\u2500 docker-compose.yaml\n\u251C\u2500 Dockerfile\n\u251C\u2500 index.mjs\n\u251C\u2500 logger.mjs\n\u251C\u2500 package-lock.json\n\u251C\u2500 package.json\n\u2514\u2500 README.md\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-setup",children:"API Setup"}),"\n",(0,r.jsx)(n.p,{children:"\u9996\u5148\u9700\u8981\u5EFA\u7ACB\u4E00\u4E9B\u7C21\u55AE\u7684 api\uFF0C\u9019\u88E1\u6211\u4F7F\u7528 Express.js \u9019\u500B\u6846\u67B6\uFF0C\u4E26\u4E14\u4F7F\u7528 axios \u4F86\u5C07 log \u50B3\u9001\u5230 alloy\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i express axios pg\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u63A5\u8457\u5728 ",(0,r.jsx)(n.code,{children:"index.js"})," \u4E2D\u5EFA\u7ACB\u4E00\u4E9B\u7C21\u55AE\u7684 api\uFF0C\u4E26\u52A0\u4E0A\u4E00\u500B middleware \u4F86\u8A18\u9304 log :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="index.mjs"',children:"import express from 'express';\nimport pg from 'pg';\nimport logger from './logger.mjs';\n\nconst app = express();\n\napp.use(express.json());\n\nconst pool = new pg.Pool({\n  host: 'postgres',\n  port: 5432,\n  user: 'postgres',\n  password: 'postgres',\n  database: 'postgres'\n});\n\napp.use((req, res, next) => {\n  res.on('finish', () => {\n    if (res.statusCode >= 400) {\n      logger.error({\n        message: `msg=\"Received response\" method=${req.method} path=${req.route.path} ip=${req.ip} status=${res.statusCode} url=${req.originalUrl}`\n      });\n    } else {\n      logger.info({\n        message: `msg=\"Received response\" method=${req.method} path=${req.route.path} ip=${req.ip} status=${res.statusCode} url=${req.originalUrl}`\n      });\n    }\n  });\n  next();\n});\n\napp.get('/api', (req, res) => {\n  if (Math.random() < 0.1) {\n    return res.status(500).send('Internal server error');\n  }\n  res.status(200).send('Hello, world!');\n});\n\napp.get('/api/book/:bookId', async (req, res) => {\n  if (Math.random() < 0.1) {\n    return res.status(404).send('Book not found');\n  }\n\n  try {\n    const result = await pool.query('SELECT id, title FROM books WHERE id = $1', [\n      req.params.bookId\n    ]);\n    if (result.rowCount === 0) {\n      return res.status(404).send('Book not found');\n    }\n    res.status(200).send(result.rows[0]);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Internal server error');\n  }\n});\n\napp.post('/api/book', async (req, res) => {\n  if (Math.random() < 0.1) {\n    return res.status(500).send('Internal server error');\n  }\n\n  try {\n    const { title } = req.body;\n    if (!title) {\n      return res.status(400).send('Title is required');\n    }\n    await pool.query('INSERT INTO books (title) VALUES ($1)', [title]);\n    res.status(201).send();\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Internal server error');\n  }\n});\n\napp.delete('/api/book/:bookId', async (req, res) => {\n  if (Math.random() < 0.1) {\n    return res.status(500).send('Internal server error');\n  }\n\n  try {\n    await pool.query('DELETE FROM books WHERE id = $1', [req.params.bookId]);\n    res.status(204).send();\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Internal server error');\n  }\n});\n\napp.listen(8000, async () => {\n  try {\n    await pool.connect();\n    await pool.query(`\n    CREATE TABLE IF NOT EXISTS books (\n        id SERIAL PRIMARY KEY,\n        title TEXT NOT NULL\n        )\n    `);\n  } catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n  console.log('Server is running on http://localhost:8000');\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u63A5\u8457\u5EFA\u7ACB\u4E00\u500B logger service \u4F86\u8655\u7406 log\uFF0C\u9019\u88E1\u4F7F\u7528 axios \u4F86\u767C\u9001 log \u5230 alloy\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u9700\u8981\u7279\u5225\u6CE8\u610F\u7684\u662F\u50B3\u8F38\u7684\u683C\u5F0F\u5FC5\u9808\u7B26\u5408 loki \u7684\u683C\u5F0F\uFF0C\u53EF\u4EE5\u53C3\u8003 ",(0,r.jsx)(n.a,{href:"https://grafana.com/docs/loki/latest/reference/loki-http-api/#ingest-logs",children:"Loki Push API"}),"\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "streams": [\n    {\n      "stream": {\n        "label": "value"\n      },\n      "values": [\n        ["<unix epoch in nanoseconds>", "<log line>", { "metadata": "value" }],\n        ["<unix epoch in nanoseconds>", "<log line>", { "metadata": "value" }]\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u547C\u53EB\u7684\u65B9\u5F0F\u662F ",(0,r.jsx)(n.code,{children:"logger.<level>({ message, ...metadata })"}),"\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="logger.mjs"',children:"import axios from 'axios';\n\nclass LoggerService {\n  async log(level, message, metadata) {\n    metadata.pod = 'loki-123';\n\n    const lokiLogEntry = {\n      streams: [\n        {\n          stream: {\n            level: level,\n            service_name: 'loki-demo'\n          },\n          values: [[`${Date.now() * 1000000}`, message, metadata]]\n        }\n      ]\n    };\n\n    try {\n      await axios.post(`http://alloy:3100/loki/api/v1/push`, lokiLogEntry);\n      console.log(`[${level.toUpperCase()}] ${message}`);\n    } catch (error) {\n      console.error('Error logging to Loki: ', error);\n    }\n  }\n\n  fatal(payload) {\n    const { message, ...metadata } = payload;\n    this.log('fatal', message, metadata);\n  }\n\n  error(payload) {\n    const { message, ...metadata } = payload;\n    this.log('error', message, metadata);\n  }\n\n  warn(payload) {\n    const { message, ...metadata } = payload;\n    this.log('warn', message, metadata);\n  }\n\n  info(payload) {\n    const { message, ...metadata } = payload;\n    this.log('info', message, metadata);\n  }\n\n  debug(payload) {\n    const { message, ...metadata } = payload;\n    this.log('debug', message, metadata);\n  }\n}\n\nexport default new LoggerService();\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u6700\u5F8C\u4F7F\u7528\u7C21\u55AE\u7684 Dockerfile \u4F86\u5305\u88DD\u6211\u5011\u7684 server :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",metastring:'title="Dockerfile"',children:'FROM node:20-alpine3.18\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --production\nCOPY . .\n\nEXPOSE 8000\n\nCMD ["node", "index.mjs"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,r.jsx)(n.p,{children:"\u63A5\u4E0B\u4F86\u8A2D\u5B9A docker-compose \u4EE5\u53CA\u5404\u500B\u670D\u52D9\u7684 config file :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose up -d\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:"name: loki-demo\n\nservices:\n  alloy:\n    container_name: alloy\n    image: grafana/alloy:v1.7.1\n    restart: always\n    command: ['run', '--server.http.listen-addr=0.0.0.0:12345', '/etc/alloy/config.alloy']\n    healthcheck:\n      test:\n        [\n          'CMD',\n          '/bin/bash',\n          '-c',\n          \"echo -e 'GET /-/ready HTTP/1.1\\\\nHost: localhost\\\\nConnection: close\\\\n\\\\n' > /dev/tcp/localhost/12345\"\n        ]\n      interval: 5s\n      timeout: 5s\n      retries: 10\n      start_period: 5s\n    volumes:\n      - ./config/alloy/config.alloy:/etc/alloy/config.alloy\n      - ./data/postgres/logs:/var/log/\n    ports:\n      - '12345:12345'\n\n  loki:\n    container_name: loki\n    image: grafana/loki:3.4.2\n    restart: always\n    command: ['--pattern-ingester.enabled=true', '-config.file=/etc/loki/loki.config.yaml']\n    healthcheck:\n      test: wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1\n      interval: 10s\n      timeout: 5s\n      retries: 10\n      start_period: 20s\n    volumes:\n      - ./config/loki/loki.config.yaml:/etc/loki/loki.config.yaml\n    ports:\n      - '3100:3100'\n\n  grafana:\n    container_name: grafana\n    image: grafana/grafana:11.5.1\n    restart: always\n    environment:\n      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app\n      - GF_AUTH_ANONYMOUS_ENABLED=true\n      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin\n      - GF_AUTH_DISABLE_LOGIN_FORM=true\n    healthcheck:\n      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']\n      interval: 5s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n    volumes:\n      - ./config/grafana/provisioning:/etc/grafana/provisioning\n      - ./config/grafana/dashboards:/var/lib/grafana/dashboards\n    ports:\n      - '3000:3000'\n\n  postgres:\n    container_name: postgres\n    image: postgres:16.8\n    restart: always\n    command:\n      [\n        'postgres',\n        '-c',\n        'logging_collector=on',\n        '-c',\n        'log_destination=jsonlog',\n        '-c',\n        'log_directory=/logs',\n        '-c',\n        'log_filename=log-%M.log',\n        '-c',\n        'log_rotation_age=1min',\n        '-c',\n        'log_truncate_on_rotation=on',\n        '-c',\n        'log_statement=all'\n      ]\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    healthcheck:\n      test: ['CMD', 'pg_isready', '-U', 'postgres']\n      interval: 5s\n      timeout: 5s\n      retries: 10\n      start_period: 5s\n    volumes:\n      - ./data/postgres/logs:/logs\n    ports:\n      - '5432:5432'\n\n  server:\n    container_name: server\n    build:\n      dockerfile: Dockerfile\n    restart: always\n    ports:\n      - '8000:8000'\n    depends_on:\n      alloy:\n        condition: service_healthy\n        restart: true\n      postgres:\n        condition: service_healthy\n        restart: true\n\n  request:\n    container_name: request\n    image: curlimages/curl:8.12.1\n    restart: always\n    command: |\n      sh -c 'while true; do\n        method=$$(echo \"GET POST PUT DELETE\" | tr \" \" \"\\n\" | shuf -n1)\n        bookId=$$(shuf -i 1-100 -n1)\n        case $$method in\n          GET)\n            ep=$$(echo \"/api /api/book/$$bookId\" | tr \" \" \"\\n\" | shuf -n1)\n            curl -s -X GET http://server:8000$$ep\n            ;;\n          POST)\n            curl -s -X POST -H \"Content-Type: application/json\" http://server:8000/api/book -d \"{\\\"title\\\": \\\"Book $$bookId\\\"}\"\n            ;;\n          DELETE)\n            curl -s -X DELETE http://server:8000/api/book/$$bookId\n            ;;\n        esac\n        sleep 0.5\n      done'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alloy",children:"Alloy"}),"\n",(0,r.jsxs)(n.p,{children:["\u53EF\u4EE5\u5728 ",(0,r.jsx)(n.code,{children:"localhost:12345"})," \u4E2D\u67E5\u770B alloy \u7684\u6D41\u7A0B\u5716 :"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alloy",src:o(11036).Z+"",width:"1412",height:"858"})}),"\n",(0,r.jsx)(n.p,{children:"config file \u7684\u8A2D\u5B9A\u5305\u542B\u5169\u500B\u90E8\u5206\uFF0C\u4E00\u500B\u662F\u8655\u7406\u61C9\u7528\u7A0B\u5F0F\u50B3\u904E\u4F86\u7684\u8CC7\u6599\uFF0C\u53E6\u4E00\u500B\u662F\u8655\u7406 PostgreSQL \u7684 log\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u61C9\u7528\u7A0B\u5F0F\u7684\u8CC7\u6599\u6703\u76F4\u63A5\u5728 server \u4E2D\u7528 axios \u50B3\u5230 ",(0,r.jsx)(n.code,{children:"alloy:3100"})," \u518D\u9001\u5230 loki \u5132\u5B58\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:["postgres \u7684 log \u5247\u662F\u900F\u904E ",(0,r.jsx)(n.code,{children:"local.file_match"})," \u4F86\u76E3\u807D ",(0,r.jsx)(n.code,{children:"/var/log/*.json"})," \u9019\u500B\u76EE\u9304\uFF0C\u63A5\u8457\u8655\u7406\u597D timestamp \u4E26\u52A0\u4E0A\u5169\u500B label\uFF0C\u6700\u5F8C\u52A0\u4E0A service_name \u4E26\u9001\u5230 loki \u5132\u5B58\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",metastring:'title="config/alloy/config.alloy"',children:'loki.source.api "endpoint" {\n    http {\n        listen_address = "0.0.0.0"\n        listen_port = "3100"\n    }\n\n    forward_to = [loki.write.loki_server.receiver]\n}\n\nlocal.file_match "pg_local_files" {\n    path_targets = [{"__path__" = "/var/log/*.json"}]\n\n    sync_period = "5s"\n}\n\nloki.source.file "pg_log_scrape" {\n    targets    = local.file_match.pg_local_files.targets\n\n    tail_from_end = true\n\n    forward_to = [loki.process.pg_filter_logs.receiver]\n}\n\nloki.process "pg_filter_logs" {\n    stage.json {\n        expressions = {ts = "timestamp", level = "error_severity", dbname = "dbname"}\n    }\n\n    stage.timestamp {\n        source = "ts"\n        format = "2006-01-02 15:04:05.000 MST"\n    }\n\n    stage.labels {\n        values = {\n            level = "level",\n            dbname = "dbname",\n        }\n    }\n\n    forward_to = [loki.relabel.pg_relabel.receiver]\n}\n\nloki.relabel "pg_relabel" {\n    rule {\n        regex  = "^filename$"\n        action = "labeldrop"\n    }\n\n    rule {\n        target_label = "service_name"\n        replacement  = "postgres"\n        action       = "replace"\n    }\n\n    forward_to = [loki.write.loki_server.receiver]\n}\n\nloki.write "loki_server" {\n    endpoint {\n        url = "http://loki:3100/loki/api/v1/push"\n\n        basic_auth {\n            username = ""\n            password = ""\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"loki",children:"Loki"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728 loki \u7684\u8A2D\u5B9A\u4E5F\u662F\u4F7F\u7528\u6700\u57FA\u672C\u7684\u65B9\u5F0F\uFF0C\u76E3\u807D 3100 port\uFF0C\u4E26\u4E14\u5C07 log \u5B58\u653E\u5728 ",(0,r.jsx)(n.code,{children:"/tmp/loki"})," \u4E2D\uFF0C\u6BD4\u8F03\u7279\u5225\u7684\u5730\u65B9\u662F\u555F\u7528\u4E86\u65B0\u7248\u672C\u624D\u652F\u63F4\u7684 structured metadata :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="config/loki/loki.config.yaml"',children:"# Disable multi-tenancy, ensuring a single tenant for all log streams.\nauth_enabled: false\n\n# Configuration block for the Loki server.\nserver:\n  http_listen_port: 3100 # Listen on port 3100 for all incoming traffic.\n  log_level: info # Set the log level to info.\n\n# The limits configuration block allows default global and per-tenant limits to be set (which can be altered in an\n# overrides block). In this case, volume usage is be enabled globally (as there is one tenant).\n# This is used by the Logs Explorer app in Grafana.\nlimits_config:\n  volume_enabled: true\n  allow_structured_metadata: true\n  discover_log_levels: true\n\n# The common block is used to set options for all of the components that make up Loki. These can be overridden using\n# the specific configuration blocks for each component.\ncommon:\n  instance_addr:\n    127.0.0.1 # The address at which this Loki instance can be reached on the local hash ring.\n    # Loki is running as a single binary, so it's the localhost address.\n  path_prefix: /loki # Prefix for all HTTP endpoints.\n  # Configuration of the underlying Loki storage system.\n  storage:\n    # Use the local filesystem. In a production environment, you'd use an object store like S3 or GCS.\n    filesystem:\n      chunks_directory: /loki/chunks # The FS directory to store the Loki chunks in.\n      rules_directory: /loki/rules # The FS directory to store the Loki rules in.\n  replication_factor:\n    1 # The replication factor (RF) determines how many ingesters will store each chunk.\n    # In this case, we have one ingester, so the RF is 1, but in a production system\n    # you'd have multiple ingesters and set the RF to a higher value for resilience.\n  # The ring configuration block is used to configure the hash ring that all components use to communicate with each other.\n  ring:\n    # Use an in-memory ring. In a production environment, you'd use a distributed ring like memberlist, Consul or etcd.\n    kvstore:\n      store: inmemory\n\n# The schema_config block is used to configure the schema that Loki uses to store log data. Loki allows the use of\n# multiple schemas based on specific time periods. This allows backwards compatibility on schema changes.\nschema_config:\n  # Only one config is specified here.\n  configs:\n    - from: 2020-10-24 # When the schema applies from.\n      store: tsdb # Where the schema is stored, in this case using the TSDB store.\n      object_store: filesystem # As configured in the common block above, the object store is the local filesystem.\n      schema: v13 # Specify the schema version to use, in this case the latest version (v13).\n      # The index configuration block is used to configure how indexing tables are created and stored. Index tables\n      # are the directory that allows Loki to determine which chunks to read when querying for logs.\n      index:\n        prefix: index_ # Prefix for all index tables.\n        period: 24h # The period for which each index table covers. In this case, 24 hours.\n\n# The ruler configuration block to configure the ruler (for recording rules and alerts) in Loki.\n# ruler:\n#   alertmanager_url:\n#     http://localhost:9093\n#     # The URL of the Alertmanager to send alerts to. Again, this is a single\n#     # binary instance running on the same host, so it's localhost.\n# By default, Loki will send anonymous, but uniquely-identifiable usage and configuration\n# analytics to Grafana Labs. These statistics are sent to https://stats.grafana.org/\n#\n# Statistics help us better understand how Loki is used, and they show us performance\n# levels for most users. This helps us prioritize features and documentation.\n# For more information on what's sent, look at\n# https://github.com/grafana/loki/blob/main/pkg/usagestats/stats.go\n# Refer to the buildReport method to see what goes into a report.\n#\n# If you would like to disable reporting, uncomment the following lines:\n#analytics:\n#  reporting_enabled: false\n"})}),"\n",(0,r.jsx)(n.h3,{id:"grafana",children:"Grafana"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 docker-compose \u4E2D\uFF0C\u5B89\u88DD\u4E86\u4E00\u500B\u8DDF loki \u6709\u95DC\u7684 plugin\uFF0C\u4E26\u4E14\u8A2D\u5B9A\u4E86\u533F\u540D\u767B\u5165\u4EE5\u53CA\u8CC7\u6599\u4F86\u6E90\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="config/grafana/provisioning/datasources/datasources.yaml"',children:"apiVersion: 1\n\ndatasources:\n  - name: Loki\n    type: loki\n    access: proxy\n    uid: loki\n    url: http://loki:3100\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u5B8C\u6210\u4E4B\u5F8C\uFF0C\u53EF\u4EE5\u6253\u958B ",(0,r.jsx)(n.a,{href:"http://localhost:3000",children:"Grafana"}),"\uFF0C\u4E26\u5728\u5DE6\u908A\u7684 Explore \u4E2D\u9078\u64C7 Log\uFF0C\u5C31\u80FD\u958B\u59CB\u770B\u5230 log \u4E86"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"dashboards",src:o(21650).Z+"",width:"1910",height:"910"})}),"\n",(0,r.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728 docker-compose \u4E2D\uFF0C\u6211\u5011\u555F\u7528\u4E86 postgres \u7684 log\uFF0C\u4E26\u4E14\u5C07 log \u5B58\u653E\u5728 ",(0,r.jsx)(n.code,{children:"/logs"})," \u4E2D\uFF0C\u6703\u4EE5 json \u7684\u683C\u5F0F\u5132\u5B58\u4F86\u65B9\u4FBF\u89E3\u6790\u3002"]}),"\n",(0,r.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,r.jsx)(n.p,{children:"\u525B\u525B\u5EFA\u7ACB\u7684 api server\uFF0C\u6703\u63A5\u6536\u8ACB\u6C42\u4E26\u628A log \u50B3\u9001\u5230 alloy\u3002"}),"\n",(0,r.jsx)(n.h3,{id:"request",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"\u4F7F\u7528 curl \u6307\u4EE4\u96A8\u6A5F\u5C0D server \u7684\u5176\u4E2D\u4E00\u500B api \u767C\u9001 request\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://grafana.com/blog/2022/07/07/how-to-configure-grafana-loki-with-a-node.js-e-commerce-app/",children:"How to configure Grafana Loki with a Node.js e-commerce app"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://community.grafana.com/t/nodejs-logging-using-winston/76990",children:"Nodejs logging using winston"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://techblog.lycorp.co.jp/zh-hant/grafana-loki-upgrade-1",children:"Grafana Loki \u7CFB\u5217\u6587\u7AE0(I) -- \u4F7F\u7528\u91D1\u7D72\u96C0\u90E8\u7F72\u5347\u7D1A Loki\uFF1A\u63D0\u5347\u6548\u80FD\u540C\u6642\u7BC0\u7701\u6210\u672C\u7684\u5BE6\u8E10\u7D93\u9A57"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=EPLvB1eVJJk",children:"6 Easy Ways to Improve your Log Dashboards with Grafana and Loki"})}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11036:function(e,n,o){o.d(n,{Z:()=>s});let s=o.p+"assets/images/image-1-9a1d9637ddbe69c63543bcc0540828a1.png"},21650:function(e,n,o){o.d(n,{Z:()=>s});let s=o.p+"assets/images/image-a7725a73502f64dedbd905a8aa8e2531.png"},50065:function(e,n,o){o.d(n,{Z:()=>i,a:()=>t});var s=o(67294);let r={},a=s.createContext(r);function t(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);