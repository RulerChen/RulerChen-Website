"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6584],{93177:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var r=o(85893),s=o(11151);const t={title:"[Docker] Compose",sidebar_position:"60",description:"Docker Compose",keywords:["Docker Compose"]},c=void 0,i={id:"Docker/Compose",title:"[Docker] Compose",description:"Docker Compose",source:"@site/docs/Docker/Compose.mdx",sourceDirName:"Docker",slug:"/Docker/Compose",permalink:"/RulerChen-Website/docs/Docker/Compose",draft:!1,unlisted:!1,editUrl:"https://github.com/RulerChen/RulerChen-Website/tree/main/docs/Docker/Compose.mdx",tags:[],version:"current",lastUpdatedAt:1721385476e3,sidebarPosition:60,frontMatter:{title:"[Docker] Compose",sidebar_position:60,description:"Docker Compose",keywords:["Docker Compose"]},sidebar:"tutorialSidebar",previous:{title:"[Docker] Network",permalink:"/RulerChen-Website/docs/Docker/Network"},next:{title:"[Docker] Swarm",permalink:"/RulerChen-Website/docs/Docker/Swarm"}},a={},d=[{value:"\u751a\u9ebc\u662f Docker Compose",id:"\u751a\u9ebc\u662f-docker-compose",level:2},{value:"Docker Compose \u6307\u4ee4",id:"docker-compose-\u6307\u4ee4",level:2},{value:"Docker Compose \u7bc4\u4f8b",id:"docker-compose-\u7bc4\u4f8b",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\u751a\u9ebc\u662f-docker-compose",children:"\u751a\u9ebc\u662f Docker Compose"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728\u4e4b\u524d\u7684\u4ecb\u7d39\u88e1\u9762\uff0c\u6211\u5011\u6240\u8b1b\u8ff0\u7684\u5927\u90e8\u5206\u53ea\u662f\u55ae\u4e00\u7684\u7269\u4ef6\uff0c\n\u4f46\u5728\u5be6\u969b\u7684\u958b\u767c\u4e2d\uff0c\u6211\u5011\u5f80\u5f80\u6703\u9700\u8981\u591a\u500b\u7269\u4ef6\u4f86\u904b\u4f5c\uff0c\n\u6211\u5011\u53ef\u80fd\u6703\u540c\u6642\u9700\u8981\u524d\u7aef\uff0c\u5f8c\u7aef\uff0c\u8cc7\u6599\u5eab\u7b49\u7b49\u7684\u670d\u52d9\uff0c\n\u5728 docker compose \u4e2d\uff0c\u6211\u5011\u53ef\u4ee5\u900f\u904e\u4e00\u500b ",(0,r.jsx)(n.code,{children:"docker-compose.yaml"})," \u6a94\u4f86\u5b9a\u7fa9\u6211\u5011\u6240\u9700\u8981\u7684\u670d\u52d9\uff0c\n\u4e26\u4f7f\u7528 ",(0,r.jsx)(n.code,{children:"docker compose up"})," \u4f86\u555f\u52d5\u9019\u4e9b\u670d\u52d9\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"docker-compose-\u6307\u4ee4",children:"Docker Compose \u6307\u4ee4"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u555f\u52d5 docker compose"}),"\n",(0,r.jsx)(n.p,{children:"\u91cd\u65b0\u69cb\u5efa\u4e26\u555f\u52d5\u670d\u52d9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose up -d --build\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u522a\u9664\u7121\u7528\u7684\u5bb9\u5668"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose up -d --remove-orphans\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u91cd\u65b0\u555f\u52d5 docker compose"}),"\n",(0,r.jsx)(n.p,{children:"\u5e38\u7528\u65bc\u639b\u8f09 VOLUME \u5f8c\uff0c\u91cd\u65b0\u555f\u52d5\u670d\u52d9"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose restart\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u505c\u6b62 docker compose"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose stop\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u522a\u9664 docker compose"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose down\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u8986\u5beb docker compose"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728 dev \u548c prod \u74b0\u5883\u4e2d\uff0c\u6211\u5011\u53ef\u80fd\u6703\u6709\u4e0d\u540c\u7684\u8a2d\u5b9a\uff0c\n\u6211\u5011\u53ef\u4ee5\u900f\u904e ",(0,r.jsx)(n.code,{children:"docker-compose.dev.yaml"})," \u548c ",(0,r.jsx)(n.code,{children:"docker-compose.prod.yaml"})," \u4f86\u8986\u5beb ",(0,r.jsx)(n.code,{children:"docker-compose.yaml"})," \u7684\u8a2d\u5b9a\u3002"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docker.robertchang.me/compose/extend-column#docker-compose-%E7%9A%84%E8%A6%86%E5%AF%AB%E6%AA%94%E6%A1%88",children:"\u8986\u5beb\u7bc4\u4f8b"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose -f docker-compose.yaml -f docker-compose.dev.yaml up -d\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u6c34\u5e73\u64f4\u5c55"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker compose up -d --scale web=3\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"docker-compose-\u7bc4\u4f8b",children:"Docker Compose \u7bc4\u4f8b"}),"\n",(0,r.jsx)(n.p,{children:"\u9019\u88e1\u6211\u4f7f\u7528\u4e86\u4e00\u500b\u7c21\u55ae\u7684\u7bc4\u4f8b\u4f86\u5c55\u793a\u5982\u4f55\u4f7f\u7528 docker compose\uff0c\n\u5728\u9019\u500b microservice \u7684\u5c08\u6848\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86\u4e09\u500b\u5fae\u670d\u52d9\u7684\u7cfb\u7d71\uff0c\n\u4e26\u4e14\u9023\u63a5\u5230 redis\u3001postgres \u548c rabbitmq \u9019\u4e09\u500b\u670d\u52d9\uff0c\n\u5176\u4e2d\u6211\u8a8d\u70ba\u6700\u9700\u8981\u6ce8\u610f\u7684\u662f healthcheck\uff0c\u6211\u5011\u901a\u5e38\u9700\u8981\u70ba\u670d\u52d9\u8a2d\u5b9a healthcheck \u4f86\u907f\u514d\u555f\u52d5\u5931\u6557\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"services:\n  redis:\n    container_name: redis\n    image: redis:7.2-alpine\n    restart: always\n    command: redis-server --loglevel warning\n    healthcheck:\n      test: ['CMD', 'redis-cli', 'ping']\n      interval: 5s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n    volumes:\n      - ./volumns/redis:/data\n    ports:\n      - '6379:6379'\n    networks:\n      - loginhub\n\n  postgres_auth:\n    container_name: postgres_auth\n    image: postgres:16.1-alpine\n    restart: always\n    environment:\n      POSTGRES_DB: loginhub_auth\n      POSTGRES_USER: loginhub\n      POSTGRES_PASSWORD: loginhub\n    healthcheck:\n      test: ['CMD-SHELL', \"sh -c 'pg_isready -U loginhub -d loginhub_auth'\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n    volumes:\n      - ./volumns/postgres-auth:/var/lib/postgresql/data\n    ports:\n      - '5432:5432'\n    networks:\n      - loginhub\n\n  rabbitmq:\n    container_name: rabbitmq\n    image: rabbitmq:3.13.4-management-alpine\n    restart: always\n    environment:\n      RABBITMQ_DEFAULT_USER: loginhub\n      RABBITMQ_DEFAULT_PASS: loginhub\n    healthcheck:\n      test: rabbitmq-diagnostics -q status\n      interval: 5s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\n    volumes:\n      - ./volumns/rabbitmq:/var/lib/rabbitmq\n    ports:\n      - '5672:5672'\n      - '15672:15672'\n    networks:\n      - loginhub\n\n  gateway:\n    container_name: gateway\n    build:\n      context: ./backend/1-gateway\n      dockerfile: Dockerfile.dev\n    restart: always\n    env_file:\n      - path: ./backend/1-gateway/.env\n        required: true\n    environment:\n      - AUTH_BASE_URL=http://auth:8000\n      - REDIS_HOST=redis\n    ports:\n      - '8001:8000'\n    depends_on:\n      redis:\n        condition: service_healthy\n        restart: true\n    networks:\n      - loginhub\n\n  notification:\n    container_name: notification\n    build:\n      context: ./backend/2-notification\n      dockerfile: Dockerfile.dev\n    restart: always\n    env_file:\n      - path: ./backend/2-notification/.env\n        required: true\n    environment:\n      - RABBITMQ_ENDPOINT=amqp://loginhub:loginhub@rabbitmq:5672\n    ports:\n      - '8002:8000'\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n        restart: true\n    networks:\n      - loginhub\n\n  auth:\n    container_name: auth\n    build:\n      context: ./backend/3-auth\n      dockerfile: Dockerfile.dev\n    restart: always\n    env_file:\n      - path: ./backend/3-auth/.env\n        required: true\n    environment:\n      - RABBITMQ_ENDPOINT=amqp://loginhub:loginhub@rabbitmq:5672\n      - DATABASE_HOST=postgres_auth\n    ports:\n      - '8003:8000'\n    depends_on:\n      postgres_auth:\n        condition: service_healthy\n        restart: true\n      rabbitmq:\n        condition: service_healthy\n        restart: true\n    networks:\n      - loginhub\n\nnetworks:\n  loginhub:\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>c});var r=o(67294);const s={},t=r.createContext(s);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);