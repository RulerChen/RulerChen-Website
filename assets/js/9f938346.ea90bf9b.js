"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9391],{28471:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>r,metadata:()=>d,toc:()=>u});const d=JSON.parse('{"id":"C++/synchronize","title":"[C++] \u540c\u6b65\u539f\u8a9e (Synchronize Primitive)","description":"C++ \u540c\u6b65\u539f\u8a9e","source":"@site/docs/C++/synchronize.mdx","sourceDirName":"C++","slug":"/C++/synchronize","permalink":"/RulerChen-Website/docs/C++/synchronize","draft":false,"unlisted":false,"editUrl":"https://github.com/RulerChen/RulerChen-Website/tree/main/docs/C++/synchronize.mdx","tags":[],"version":"current","lastUpdatedAt":1730249608000,"sidebarPosition":200,"frontMatter":{"title":"[C++] \u540c\u6b65\u539f\u8a9e (Synchronize Primitive)","sidebar_position":200,"description":"C++ \u540c\u6b65\u539f\u8a9e","keywords":["C++","\u540c\u6b65\u539f\u8a9e","Synchronize Primitive"]},"sidebar":"tutorialSidebar","previous":{"title":"[C++] \u79fb\u52d5\u8a9e\u610f (Move Semantics)","permalink":"/RulerChen-Website/docs/C++/move"},"next":{"title":"[C++] STL Container","permalink":"/RulerChen-Website/docs/C++/stlcontainer"}}');var s=t(74848),i=t(28453);const r={title:"[C++] \u540c\u6b65\u539f\u8a9e (Synchronize Primitive)",sidebar_position:"200",description:"C++ \u540c\u6b65\u539f\u8a9e",keywords:["C++","\u540c\u6b65\u539f\u8a9e","Synchronize Primitive"]},c=void 0,o={},u=[{value:"Thread",id:"thread",level:2},{value:"Mutex",id:"mutex",level:2},{value:"std::lock_guard",id:"stdlock_guard",level:3},{value:"std::unique_lock",id:"stdunique_lock",level:3},{value:"std::scoped_lock",id:"stdscoped_lock",level:3},{value:"Condition Variable",id:"condition-variable",level:2},{value:"Shared-Mutex &amp; Shared-Lock",id:"shared-mutex--shared-lock",level:2},{value:"Future",id:"future",level:2},{value:"std::async",id:"stdasync",level:3},{value:"std::promise",id:"stdpromise",level:3},{value:"std::packaged_task",id:"stdpackaged_task",level:3},{value:"std::shared_future",id:"stdshared_future",level:3}];function l(n){const e={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\u672c\u6587\u6703\u8b1b\u89e3 C++ \u4e2d\u540c\u6b65\u539f\u8a9e (synchronize primitive) \u7684\u57fa\u672c\u6982\u5ff5\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"thread",children:"Thread"}),"\n",(0,s.jsxs)(e.p,{children:["\u70ba\u4e86\u63d0\u9ad8\u7a0b\u5f0f\u7684\u6548\u80fd\uff0c\u8a31\u591a\u7a0b\u5f0f\u8a9e\u8a00\u90fd\u652f\u6301\u591a\u57f7\u884c\u7dd2 (multi-thread)\uff0c\u800c C++ \u4e5f\u63d0\u4f9b\u4e86 ",(0,s.jsx)(e.code,{children:"std::thread"})," \u4f86\u652f\u63f4\u591a\u57f7\u884c\u7dd2\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <thread>\n\nint count = 0;\n\nvoid add_count() { count += 1; }\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"mutex",children:"Mutex"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728\u591a\u57f7\u884c\u7dd2\u7684\u74b0\u5883\u4e0b\uff0c\u70ba\u4e86\u907f\u514d\u591a\u500b\u57f7\u884c\u7dd2\u540c\u6642\u4fee\u6539\u5171\u4eab\u8cc7\u6e90 (shared resource)\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::mutex"})," \u4f86\u4fdd\u8b77\u5171\u4eab\u8cc7\u6e90\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    mtx.lock();\n    count += 1;\n    mtx.unlock();\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdlock_guard",children:"std::lock_guard"}),"\n",(0,s.jsxs)(e.p,{children:["\u70ba\u4e86\u907f\u514d\u6c92\u6709 unlock \u7684\u610f\u5916\u60c5\u6cc1\uff0cC++11 \u4e2d\u63d0\u4f9b\u4e86\u4e00\u500b\u57fa\u65bc RAII \u6a5f\u5236\u7684 ",(0,s.jsx)(e.code,{children:"std::lock_guard"})," \u4f86\u53d6\u4ee3 ",(0,s.jsx)(e.code,{children:"std::mutex"})," \u7684 ",(0,s.jsx)(e.code,{children:"lock"})," \u548c ",(0,s.jsx)(e.code,{children:"unlock"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    std::lock_guard<std::mutex> lock(mtx);\n    count += 1;\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdunique_lock",children:"std::unique_lock"}),"\n",(0,s.jsxs)(e.p,{children:["\u9664\u6b64\u4e4b\u5916\uff0cC++11 \u9084\u63d0\u4f9b\u4e86\u53e6\u4e00\u500b\u66f4\u9748\u6d3b\u7684\u540c\u6b65\u539f\u8a9e ",(0,s.jsx)(e.code,{children:"std::unique_lock"}),"\uff0c\u53ef\u4ee5\u5728\u9700\u8981\u6642\u624b\u52d5 lock \u548c unlock\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    std::unique_lock<std::mutex> lock(mtx);\n    count += 1;\n    lock.unlock();\n\n    // Do some other work\n\n    lock.lock();\n    count += 1;\n    lock.unlock();\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdscoped_lock",children:"std::scoped_lock"}),"\n",(0,s.jsxs)(e.p,{children:["\u5230\u4e86 C++17\uff0cC++ \u63d0\u4f9b\u4e86\u4e00\u7a2e\u66f4\u65b0\u7684\u540c\u6b65\u539f\u8a9e ",(0,s.jsx)(e.code,{children:"std::scoped_lock"}),"\uff0c\u53ef\u4ee5\u540c\u6642 lock \u591a\u500b mutex\uff0c\u4e26\u4e14\u53ef\u4ee5\u907f\u514d\u6b7b\u9396 (deadlock) \u7684\u554f\u984c\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <thread>\n\nint count = 0;\nstd::mutex mtx;\n\nvoid add_count() {\n    std::scoped_lock lock(mtx);\n    count += 1;\n}\n\nint main() {\n    std::thread t1(add_count);\n    std::thread t2(add_count);\n    t1.join();\n    t2.join();\n\n    std::cout << "Printing count: " << count << std::endl;\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"condition-variable",children:"Condition Variable"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728\u591a\u57f7\u884c\u7dd2\u7684\u74b0\u5883\u4e0b\uff0c\u6709\u6642\u5019\u6211\u5011\u9700\u8981\u7b49\u5f85\u67d0\u500b\u689d\u4ef6\u6210\u7acb\u5f8c\u518d\u7e7c\u7e8c\u57f7\u884c\uff0c\u9019\u6642\u5019\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::condition_variable"})," \u4f86\u9054\u6210\u3002\n\u5982\u679c\u8981\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::condition_variable"}),"\uff0c\u4e00\u5b9a\u8981\u642d\u914d ",(0,s.jsx)(e.code,{children:"std::unique_lock"})," \u4f86\u4f7f\u7528\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <condition_variable>\n#include <iostream>\n#include <mutex>\n#include <queue>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nstd::queue<int> dataQueue;\nbool done = false;\n\n// \u751f\u7522\u8005\uff1a\u751f\u6210\u6578\u64da\u4e26\u52a0\u5165\u4f47\u5217\nvoid producer(int n) {\n    for (int i = 0; i < n; ++i) {\n        std::this_thread::sleep_for(std::chrono::milliseconds(100));  // \u6a21\u64ec\u751f\u7522\u6642\u9593\n        std::unique_lock<std::mutex> lock(mtx);\n        dataQueue.push(i);\n        std::cout << "Produced: " << i << std::endl;\n        cv.notify_one();\n    }\n    std::unique_lock<std::mutex> lock(mtx);\n    done = true;\n    cv.notify_all();\n}\n\n// \u6d88\u8cbb\u8005\uff1a\u6d88\u8017\u4f47\u5217\u4e2d\u7684\u6578\u64da\nvoid consumer() {\n    while (true) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [] { return !dataQueue.empty() || done; });\n\n        while (!dataQueue.empty()) {\n            int value = dataQueue.front();\n            dataQueue.pop();\n            lock.unlock();\n            std::cout << "Consumed: " << value << std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(150));\n            lock.lock();\n        }\n\n        if (done) break;\n    }\n}\n\nint main() {\n    std::thread prod(producer, 10);\n    std::thread cons(consumer);\n    prod.join();\n    cons.join();\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u4e0a\u6240\u793a\uff0c\u6211\u5011\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::condition_variable"})," \u4f86\u5be6\u73fe producer-consumer \u6a21\u5f0f\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"shared-mutex--shared-lock",children:"Shared-Mutex & Shared-Lock"}),"\n",(0,s.jsxs)(e.p,{children:["\u5728\u8f03\u65b0\u7248\u672c\u7684 C++ \u4e2d\uff0c\u63d0\u4f9b\u4e86\u5169\u500b\u65b0\u7684\u540c\u6b65\u539f\u8a9e ",(0,s.jsx)(e.code,{children:"std::shared_mutex"})," (C++17) \u548c ",(0,s.jsx)(e.code,{children:"std::shared_lock"})," (C++14)\uff0c\u53ef\u4ee5\u7528\u4f86\u5be6\u73fe\u8b80\u5beb\u9396 (read-write lock)\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\n#include <mutex>\n#include <shared_mutex>\n#include <thread>\n\nint count = 0;\nstd::shared_mutex m;\n\nvoid read_value() {\n    std::shared_lock lk(m);\n    std::cout << "Reading value " + std::to_string(count) + "\\n" << std::flush;\n}\n\nvoid write_value() {\n    std::unique_lock lk(m);\n    count += 5;\n}\n\nint main() {\n    std::thread t1(read_value);\n    std::thread t2(write_value);\n    std::thread t3(read_value);\n    std::thread t4(read_value);\n    std::thread t5(write_value);\n    std::thread t6(read_value);\n\n    t1.join();\n    t2.join();\n    t3.join();\n    t4.join();\n    t5.join();\n    t6.join();\n\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"std::shared_mutex"})," \u5141\u8a31\u4ee5\u5169\u7a2e\u65b9\u5f0f\u9396\u5b9a\uff1a\u5171\u4eab\u9396 (shared lock) \u548c\u7368\u4f54\u9396 (exclusive lock)\u3002\u5171\u4eab\u9396\u5141\u8a31\u591a\u500b\u57f7\u884c\u7dd2\u540c\u6642\u8b80\u53d6\u8cc7\u6e90\uff0c\u800c\u7368\u4f54\u9396\u5247\u53ea\u5141\u8a31\u4e00\u500b\u57f7\u884c\u7dd2\u5beb\u5165\u8cc7\u6e90\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"future",children:"Future"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"std::future"})," \u662f\u5728 C++11 \u4e2d\u5f15\u5165\u7684\u540c\u6b65\u5de5\u5177\uff0c\u4e3b\u8981\u7528\u65bc\u7570\u6b65\u64cd\u4f5c (asynchronous operation) \u548c\u591a\u57f7\u884c\u7dd2\u4e4b\u9593\u7684\u901a\u4fe1\uff0c\u53ef\u4ee5\u8b93\u4e00\u500b\u57f7\u884c\u7dd2\u7b49\u5f85\u53e6\u4e00\u500b\u57f7\u884c\u7dd2\u7684\u7d50\u679c\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"stdasync",children:"std::async"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <chrono>\n#include <future>\n#include <iostream>\n\nint longComputation(int x) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return x * x;\n}\n\nint main() {\n    std::future<int> result = std::async(std::launch::async, longComputation, 5);\n\n    // do something else\n    std::cout << "Performing other work...\\n";\n\n    int value = result.get();\n    std::cout << "Result of computation: " << value << \'\\n\';\n\n    return 0;\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u4e0a\u65b9\u6240\u793a\uff0c\u6211\u5011\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::async"})," \u4f86\u555f\u52d5\u4e00\u500b\u7570\u6b65\u64cd\u4f5c\uff0c\u4e26\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::future"})," \u4f86\u7b49\u5f85\u7d50\u679c\u3002"]}),"\n",(0,s.jsx)(e.h3,{id:"stdpromise",children:"std::promise"}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u679c\u60f3\u8981\u50b3\u905e\u8cc7\u8a0a\u7d66\u5176\u4ed6\u57f7\u884c\u7dd2\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::promise"})," \u548c ",(0,s.jsx)(e.code,{children:"std::future"})," \u4f86\u5be6\u73fe\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <future>\n#include <iostream>\n#include <thread>\n\nvoid setPromiseValue(std::promise<int> &&promise, int value) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    promise.set_value(value * 2);\n}\n\nint main() {\n    std::promise<int> promise;\n    std::future<int> result = promise.get_future();\n\n    std::thread t(setPromiseValue, std::move(promise), 10);\n\n    std::cout << "Waiting for the result...\\n";\n    int value = result.get();\n    std::cout << "Result from promise: " << value << \'\\n\';\n\n    t.join();\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdpackaged_task",children:"std::packaged_task"}),"\n",(0,s.jsxs)(e.p,{children:["\u4e5f\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::packaged_task"})," \u4f86\u5c07\u51fd\u6578\u5305\u88dd\u6210\u4e00\u500b ",(0,s.jsx)(e.code,{children:"std::future"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <chrono>\n#include <future>\n#include <iostream>\n#include <thread>\n\nint square(int x) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return x * x;\n}\n\nint main() {\n    std::packaged_task<int(int)> task(square);\n\n    std::future<int> result = task.get_future();\n\n    std::thread t(std::move(task), 5);\n\n    std::cout << "Calculating...\\n";\n    std::cout << "Result of square computation: " << result.get() << \'\\n\';\n\n    t.join();\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"stdshared_future",children:"std::shared_future"}),"\n",(0,s.jsxs)(e.p,{children:["\u5982\u679c\u8981\u5728\u591a\u500b\u57f7\u884c\u7dd2\u4e4b\u9593\u5171\u4eab\u8cc7\u6599\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"std::shared_future"}),"\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"#include <future>\n#include <iostream>\n#include <thread>\n\nint longComputation(int x) {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return x * x;\n}\n\nint main() {\n    std::future<int> fut = std::async(std::launch::async, longComputation, 5);\n    std::shared_future<int> shared_result = fut.share();\n\n    auto print_result = [](std::shared_future<int> shared_result) {\n        std::cout << \"Computed result: \" << shared_result.get() << '\\n';\n    };\n\n    std::thread t1(print_result, shared_result);\n    std::thread t2(print_result, shared_result);\n\n    t1.join();\n    t2.join();\n\n    return 0;\n}\n"})})]})}function a(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>c});var d=t(96540);const s={},i=d.createContext(s);function r(n){const e=d.useContext(i);return d.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),d.createElement(i.Provider,{value:e},n.children)}}}]);