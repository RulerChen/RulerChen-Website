"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["2243"],{46177:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,default:()=>d,toc:()=>a,metadata:()=>s,assets:()=>l,contentTitle:()=>p});var s=JSON.parse('{"id":"NodeJs/expresssetup","title":"[Express.js] Express Setup","description":"Setup a new Express.js project with ESM\u3001typescript\u3001Jest\u3001Prettier\u3001ESLint and Path Alias","source":"@site/docs/NodeJs/expresssetup.mdx","sourceDirName":"NodeJs","slug":"/NodeJs/expresssetup","permalink":"/RulerChen-Website/docs/NodeJs/expresssetup","draft":false,"unlisted":false,"editUrl":"https://github.com/RulerChen/RulerChen-Website/tree/main/docs/NodeJs/expresssetup.mdx","tags":[],"version":"current","lastUpdatedAt":1730087541000,"sidebarPosition":10,"frontMatter":{"title":"[Express.js] Express Setup","sidebar_position":10,"description":"Setup a new Express.js project with ESM\u3001typescript\u3001Jest\u3001Prettier\u3001ESLint and Path Alias","keywords":["express","express.js","setup","project","esm","typescript","jest","prettier","eslint","path alias","gen-express-cli","setup express.js","express setup","express project","express esm","express typescript","express jest","express path alias"]},"sidebar":"tutorialSidebar","previous":{"title":"[Python] Everything in Rust (uv + Ruff)","permalink":"/RulerChen-Website/docs/Python/uv"},"next":{"title":"[Go] Basic Syntax","permalink":"/RulerChen-Website/docs/Golang/syntax"}}'),r=t(85893),i=t(50065);let o={title:"[Express.js] Express Setup",sidebar_position:10,description:"Setup a new Express.js project with ESM\u3001typescript\u3001Jest\u3001Prettier\u3001ESLint and Path Alias",keywords:["express","express.js","setup","project","esm","typescript","jest","prettier","eslint","path alias","gen-express-cli","setup express.js","express setup","express project","express esm","express typescript","express jest","express path alias"]},p=void 0,l={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1 - Create a new project",id:"step-1---create-a-new-project",level:2},{value:"Step 2 - Install dependencies",id:"step-2---install-dependencies",level:2},{value:"Step 3 - Create a index.ts file",id:"step-3---create-a-indexts-file",level:2},{value:"Step 4 - Setup TypeScript",id:"step-4---setup-typescript",level:2},{value:"Step 5 - Setup ESLint and Prettier",id:"step-5---setup-eslint-and-prettier",level:2},{value:"Step 6 - Setup Jest",id:"step-6---setup-jest",level:2},{value:"Step 7 - Test your project",id:"step-7---test-your-project",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"In this article, I will show you how to setup a new Express.js project with ESM\u3001typescript\u3001Jest\u3001Prettier\u3001ESLint and Path Alias."}),"\n",(0,r.jsxs)(n.p,{children:["You can do it manually or use the ",(0,r.jsx)(n.code,{children:"gen-express-cli"})," to generate a new project with the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx gen-express-cli@latest <project-name>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-1---create-a-new-project",children:"Step 1 - Create a new project"}),"\n",(0,r.jsx)(n.p,{children:"First, create a new project with the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir express-project\ncd express-project\n\nnpm init -y\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-2---install-dependencies",children:"Step 2 - Install dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Paste the following code into your package.json file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "name": "test",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "dev": "cross-env NODE_ENV=development nodemon -r tsconfig-paths/register --exec ts-node ./src/index.ts --files",\n    "start": "cross-env NODE_ENV=production node ./build/src/index.js",\n    "build": "tsc && tsc-alias",\n    "lint": "eslint ./src/**/*.ts --fix",\n    "format": "prettier --write ./**/*.{ts,json}",\n    "test": "jest --coverage=true -w=1 --forceExit --detectOpenHandles --watchAll=false --testPathPattern=src/__tests__ --testPathIgnorePatterns=build"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "cors": "^2",\n    "dotenv": "^16",\n    "express": "^4"\n  },\n  "devDependencies": {\n    "cross-env": "^7",\n    "nodemon": "^3",\n    "typescript": "~5.3",\n    "ts-node": "^10",\n    "@types/cors": "^2",\n    "@types/express": "^4",\n    "@types/node": "^20",\n    "eslint": "^8",\n    "eslint-config-prettier": "^9",\n    "eslint-config-standard-with-typescript": "^43",\n    "eslint-plugin-import": "^2",\n    "eslint-plugin-n": "^16",\n    "eslint-plugin-prettier": "^5",\n    "eslint-plugin-promise": "^6",\n    "@typescript-eslint/eslint-plugin": "^6",\n    "eslint-plugin-jest": "^27",\n    "prettier": "^3",\n    "jest": "^29",\n    "ts-jest": "^29",\n    "@types/jest": "^29",\n    "tsc-alias": "^1",\n    "tsconfig-paths": "^4",\n    "typescript-transform-paths": "^3"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, install the dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3---create-a-indexts-file",children:"Step 3 - Create a index.ts file"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file named ",(0,r.jsx)(n.code,{children:"src/index.ts"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="src/index.ts"',children:"import express from 'express';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT ?? 8000;\n\napp.use(cors());\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n\nexport default app;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4---setup-typescript",children:"Step 4 - Setup TypeScript"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file named ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  "compilerOptions": {\n    "target": "es6",\n    "module": "NodeNext",\n    "moduleResolution": "NodeNext",\n    "resolveJsonModule": true,\n    "baseUrl": ".",\n    "outDir": "build",\n    "sourceMap": true,\n    "strict": true,\n    "esModuleInterop": true,\n    "types": ["node", "jest"],\n    "plugins": [\n      {\n        "transform": "typescript-transform-paths"\n      },\n      {\n        "transform": "typescript-transform-paths",\n        "afterDeclarations": true\n      }\n    ],\n    "paths": {\n      "@/*": ["src/*"]\n    }\n  },\n  "include": ["process.env.d.ts", "./**/*.ts"],\n  "exclude": ["node_modules"]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-5---setup-eslint-and-prettier",children:"Step 5 - Setup ESLint and Prettier"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file named ",(0,r.jsx)(n.code,{children:".eslintrc.json"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title=".eslintrc.json"',children:'{\n  "env": {\n    "es2021": true,\n    "node": true,\n    "jest/globals": true\n  },\n  "extends": ["standard-with-typescript", "prettier"],\n  "plugins": ["jest", "prettier"],\n  "parserOptions": {\n    "ecmaVersion": "latest",\n    "sourceType": "module"\n  },\n  "rules": {\n    "prettier/prettier": [\n      "error",\n      {\n        "semi": true,\n        "tabWidth": 2,\n        "printWidth": 140,\n        "singleQuote": true,\n        "bracketSameLine": false,\n        "trailingComma": "all",\n        "arrowParens": "always"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file named ",(0,r.jsx)(n.code,{children:".prettierrc"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title=".prettierrc"',children:'{\n  "semi": true,\n  "printWidth": 140,\n  "tabWidth": 2,\n  "singleQuote": true,\n  "bracketSpacing": true,\n  "trailingComma": "all",\n  "arrowParens": "always"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-6---setup-jest",children:"Step 6 - Setup Jest"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file named ",(0,r.jsx)(n.code,{children:"jest.config.ts"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="jest.config.ts"',children:"import type { JestConfigWithTsJest } from 'ts-jest';\n\nconst config: JestConfigWithTsJest = {\n  verbose: true,\n  transform: {\n    '^.+\\\\.ts?$': [\n      'ts-jest',\n      {\n        useESM: true\n      }\n    ]\n  },\n  extensionsToTreatAsEsm: ['.ts'],\n  moduleNameMapper: {\n    '^(\\\\.{1,2}/.*)\\\\.js$': '$1',\n    '@/(.*)': ['<rootDir>/src/$1']\n  }\n};\n\nexport default config;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-7---test-your-project",children:"Step 7 - Test your project"}),"\n",(0,r.jsx)(n.p,{children:"Run the following command to test your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Open your browser and visit ",(0,r.jsx)(n.code,{children:"http://localhost:8000"}),", you will see ",(0,r.jsx)(n.code,{children:"Hello World"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"To compile your typescript code, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\nnpm start\n"})}),"\n",(0,r.jsx)(n.p,{children:"To lint your code, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run lint\n"})}),"\n",(0,r.jsx)(n.p,{children:"To format your code, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run format\n"})}),"\n",(0,r.jsx)(n.p,{children:"To test your code, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,r.jsx)(n.p,{children:"To import modules with path alias, you can use the following code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import <module_name> from '@/module_name'; // recommended\nimport <module_name> from '../../../module_name'; // not recommended\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["If you like this article, please give me a star on ",(0,r.jsx)(n.a,{href:"https://github.com/RulerChen/gen-express-cli",children:"GitHub"})]})]})}function d(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:()=>p,a:()=>o});var s=t(67294);let r={},i=s.createContext(r);function o(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);